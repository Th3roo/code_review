/*
 * CalcTree3. В текстовом файле с именем filename дано арифметическое выражение в обратной
 * польской записи. Операндами в выражении являются целые числа из промежутка от 0 до 9. Используемые
 * операции: сложение(+), вычитание(-), умножение(*), деление нацело (/) и целочисленный остаток
 * от деления (%). Постройте дерево, соответствующее данному выражению. Знаки операций кодируйте
 * числами: сложение (-1), вычитание (-2), умножение (-3), деление нацело (-4) и целочисленный
 * остаток от деления (-5). Преобразуйте дерево так, чтобы в нем не было операции умножения
 * (замените поддеревья, в которых есть умножение значением данного поддерева). Выведите указатель
 * на корень полученного дерева.
 */

#ifndef CALCTREE_H
#define CALCTREE_H

#include <string>

/**
 * Структура узла дерева выражения
 */
struct TreeNode {
        int value;      // -1: +, -2: -, -3: *, -4: /, -5: %, 0-9: операнды
        TreeNode* left;
        TreeNode* right;
        
        TreeNode(int val) : value(val), left(nullptr), right(nullptr) {}
};

/**
 * Класс для построения и обработки деревьев арифметических выражений
 */
class CalcTree {
public:
        /**
         * Считывает выражение в обратной польской записи из файла
         * 
         * @param filename Имя файла для чтения
         * @return Выражение в обратной польской записи
         */
        std::string readRpnFromFile(const std::string& filename);
        
        /**
         * Строит дерево из выражения в обратной польской записи
         * 
         * @param rpnExpression Выражение в обратной польской записи
         * @return Указатель на корень построенного дерева
         */
        TreeNode* buildTree(const std::string& rpnExpression);
        
        /**
         * Преобразует дерево, заменяя поддеревья с операцией умножения их значениями
         * 
         * @param root Указатель на корень дерева для преобразования
         * @return Указатель на корень преобразованного дерева
         */
        TreeNode* eliminateMultiplication(TreeNode* root);
        
        /**
         * Вычисляет значение поддерева
         * 
         * @param node Указатель на корень поддерева для вычисления
         * @return Вычисленное значение поддерева
         */
        int evaluateSubtree(TreeNode* node);
        
        /**
         * Отображает структуру дерева
         * 
         * @param node Указатель на корень дерева для отображения
         * @param level Текущий уровень в дереве (для отступов)
         */
        void displayTree(TreeNode* node, int level = 0);
        
        /**
         * Освобождает память, выделенную для дерева
         * 
         * @param node Указатель на корень дерева для очистки
         */
        void cleanupTree(TreeNode* node);
};

#endif // CALCTREE_H