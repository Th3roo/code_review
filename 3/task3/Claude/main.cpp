/*
 * Graf8. Юный путешественник решил изучить схему авиационного сообщения. Схема авиационного
 * сообщения задана в текстовом файле с именем FileName в виде матрицы смежности. Первая
 * строка файла содержит количество городов (n) n<=15, связанных авиационным сообщением, а
 * следующие n строк хранят матрицу (m), m[i][j]=0, если не имеется возможности перелета из города
 * i в город j, иначе m[i][j]=1. Определить номера городов, в которые из города K можно долететь
 * не менее чем с L пересадками и более коротких путей к таким городам не существует. Перечислите
 * номера таких городов в порядке возрастания. Нумерация городов начинается с 1. Если
 * таких городов нет, выведите число (-1).
 */

#include <iostream>
#include <string>
#include <vector>
#include "Graf.h"

int main() {
        Graph graph;
        std::string filename;
        int k, l;
        
        // Ввод имени файла с проверкой
        std::cout << "Введите имя файла с матрицей смежности: ";
        std::cin >> filename;
        
        if (!graph.readFromFile(filename)) {
                std::cerr << "Ошибка чтения файла. Программа завершается." << std::endl;
                return 1;
        }
        
        // Ввод исходного города K с проверкой
        do {
                std::cout << "Введите номер исходного города K (от 1 до " << graph.getNumCities() << "): ";
                std::cin >> k;
                
                if (std::cin.fail()) {
                        std::cin.clear();
                        std::cin.ignore(10000, '\n');
                        std::cerr << "Введите корректное число." << std::endl;
                        k = 0; // Устанавливаем некорректное значение для повторного ввода
                } else if (k < 1 || k > graph.getNumCities()) {
                        std::cerr << "Номер города должен быть от 1 до " << graph.getNumCities() << std::endl;
                }
        } while (k < 1 || k > graph.getNumCities());
        
        // Ввод минимального количества пересадок L с проверкой
        do {
                std::cout << "Введите минимальное количество пересадок L (неотрицательное число): ";
                std::cin >> l;
                
                if (std::cin.fail()) {
                        std::cin.clear();
                        std::cin.ignore(10000, '\n');
                        std::cerr << "Введите корректное число." << std::endl;
                        l = -1; // Устанавливаем некорректное значение для повторного ввода
                } else if (l < 0) {
                        std::cerr << "Количество пересадок не может быть отрицательным." << std::endl;
                }
        } while (l < 0);
        
        // Находим города, удовлетворяющие условию
        std::vector<int> result = graph.findCitiesWithExactTransfers(k, l);
        
        // Выводим результат
        if (result.empty()) {
                std::cout << "-1" << std::endl;
        } else {
                for (size_t i = 0; i < result.size(); ++i) {
                        std::cout << result[i];
                        if (i < result.size() - 1) {
                                std::cout << " ";
                        }
                }
                std::cout << std::endl;
        }
        
        return 0;
}