/*
 * Graf8. Юный путешественник решил изучить схему авиационного сообщения. Схема авиационного
 * сообщения задана в текстовом файле с именем FileName в виде матрицы смежности. Первая
 * строка файла содержит количество городов (n) n<=15, связанных авиационным сообщением, а
 * следующие n строк хранят матрицу (m), m[i][j]=0, если не имеется возможности перелета из города
 * i в город j, иначе m[i][j]=1. Определить номера городов, в которые из города K можно долететь
 * не менее чем с L пересадками и более коротких путей к таким городам не существует. Перечислите
 * номера таких городов в порядке возрастания. Нумерация городов начинается с 1. Если
 * таких городов нет, выведите число (-1).
 */

#ifndef GRAF_H
#define GRAF_H

#include <string>
#include <vector>

/**
 * Класс для работы с графом авиасообщений
 */
class Graph {
public:
        /**
         * Конструктор класса Graph
         */
        Graph();
        
        /**
         * Читает граф из файла
         * 
         * @param filename Имя файла с матрицей смежности
         * @return true если чтение успешно, false в противном случае
         */
        bool readFromFile(const std::string& filename);
        
        /**
         * Находит города, в которые можно долететь ровно с L пересадками
         * 
         * @param k Исходный город (нумерация с 1)
         * @param l Минимальное количество пересадок
         * @return Вектор номеров городов в порядке возрастания
         */
        std::vector<int> findCitiesWithExactTransfers(int k, int l);
        
        /**
         * Возвращает количество городов в графе
         * 
         * @return Количество городов
         */
        int getNumCities() const;
        
private:
        std::vector<std::vector<int>> adjacencyMatrix; // Матрица смежности
        int numCities; // Количество городов
};

#endif // GRAF_H