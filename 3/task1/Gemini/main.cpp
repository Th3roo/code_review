/* Задание: Ввести слово, перемешивать буквы случайно до совпадения с исходным,
   выводить каждую попытку, посчитать количество попыток (не считая исходного). */
#include <iostream>
#include <string>
#include <limits>   // Требуется для std::numeric_limits
#include <cstdlib>  // Требуется для EXIT_SUCCESS, EXIT_FAILURE
#include "WordShuffler.h" // Подключаем наш заголовочный файл

// Разрешено использовать "using namespace std;" в .cpp файлах
using namespace std;

/**
 * @brief Главная функция программы.
 *        Запрашивает у пользователя слово, проверяет ввод,
 *        запускает процесс перемешивания и выводит результат.
 * @param argc Количество аргументов командной строки (не используется).
 * @param argv Вектор аргументов командной строки (не используется).
 * @return EXIT_SUCCESS в случае успешного выполнения, EXIT_FAILURE в случае ошибки.
 */
int main(int argc, char* argv[]) {
	// Инициализация переменной для хранения слова
	string originalWord = "";

	cout << "Введите слово: ";
	// Считываем слово из стандартного ввода
	cin >> originalWord;

	// --- Проверка ввода ("защита от дурака") ---
	// 1. Проверяем состояние потока ввода после операции чтения
	if (cin.fail()) {
		// Если поток в состоянии ошибки (например, введены не буквы, или достигнут конец файла)
		cerr << "Ошибка ввода. Пожалуйста, введите корректное слово." << endl;

		// Очищаем флаги ошибок потока
		cin.clear();

		// Игнорируем оставшиеся символы в буфере ввода до конца строки,
		// чтобы предотвратить проблемы при последующих операциях ввода (если бы они были).
		cin.ignore(numeric_limits<streamsize>::max(), '\n');

		return EXIT_FAILURE; // Завершаем программу с кодом ошибки
	}

	// 2. Дополнительно проверим на пустую строку (хотя cin >> обычно сам не считывает пустую строку,
	// но проверка не помешает, и она есть в `runShufflingProcess`).
	// Проверка в `runShufflingProcess` важнее, но ранняя проверка здесь тоже полезна.
	if (originalWord.empty()) {
		cerr << "Ошибка: Введено пустое слово." << endl;
		return EXIT_FAILURE;
	}
	// --- Конец проверки ввода ---

	// Вызываем функцию, выполняющую основную логику задачи
	int attempts = runShufflingProcess(originalWord);

	// Проверяем результат выполнения функции
	// Если вернулось -1, значит была ошибка (например, пустая строка прошла первую проверку,
	// но была поймана внутри функции - хотя сейчас это маловероятно).
	if (attempts < 0) {
		// Сообщение об ошибке уже было выведено функцией runShufflingProcess
		return EXIT_FAILURE; // Завершаем программу с кодом ошибки
	}

	// Выводим итоговое количество попыток, если выполнение прошло успешно
	cout << attempts << " попыток" << endl;

	// Возвращаем код успешного завершения
	return EXIT_SUCCESS;
}